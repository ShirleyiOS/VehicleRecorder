//
//  JACommentController.m
//  JinAiWang
//
//  Created by JoshuaLam on 15/1/8.
//  Copyright (c) 2015年 Jinaiwang. All rights reserved.
//

#import "JACommentController.h"
#import "JLTextView.h"
#import "JATextToolBar.h"
#import "IQKeyboardManager.h"

@interface JACommentController () <UITextViewDelegate, UIAlertViewDelegate>
@property (weak, nonatomic) IBOutlet JLTextView *textView;
@property (weak, nonatomic) IBOutlet JATextToolBar *toolBar;
@end

@implementation JACommentController

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view.
    [self setupNavBar];
    [self commonInitUI];
    [[IQKeyboardManager sharedManager] setEnable:NO];
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

- (void)viewWillAppear:(BOOL)animated
{
    [super viewWillAppear:animated];
    [self setupNotification];
}

- (void)viewDidAppear:(BOOL)animated
{
    [super viewDidAppear:animated];
    [self.textView becomeFirstResponder];
}

- (void)viewWillDisappear:(BOOL)animated
{
    [super viewWillDisappear:animated];
    [self.view endEditing:YES];
    [self removeNotification];
}

/**
 *  设置导航栏属性
 */
- (void)setupNavBar
{
//    self.navigationItem.leftBarButtonItem = [UIBarButtonItem itemWithIcon:@"返回" highIcon:@"返回-CLick" target:self action:@selector(back)];
    self.navigationItem.leftBarButtonItem = [[UIBarButtonItem alloc] initWithTitle:@"取消" style:UIBarButtonItemStylePlain target:self action:@selector(back)];
    
    UIBarButtonItem *rightBarButtonItem = [[UIBarButtonItem alloc] initWithTitle:@"发送" style:UIBarButtonItemStyleDone target:self action:@selector(sendComment)];
    self.navigationItem.rightBarButtonItems = @[rightBarButtonItem];
    self.navigationItem.rightBarButtonItem.enabled = NO;
    
}

/**
 * textView
 */
- (void)commonInitUI
{
    // 垂直方向上永远可以拖拽
    self.textView.alwaysBounceVertical = YES;
    self.textView.delegate = self;
    self.textView.limitWords = 240;
    self.textView.hideLimitWordsLabel = YES;
    self.textView.placeholder = @"说几句...";
    
    self.toolBar.limitWords = self.textView.limitWords;
}

/**
 *  初始化监听事件
 */
- (void)setupNotification
{
    // 1.监听textView文字改变的通知
    [kNotificationCenter addObserver:self selector:@selector(textDidChange) name:UITextViewTextDidChangeNotification object:self.textView];
    
    // 2.监听键盘的通知
    [kNotificationCenter addObserver:self selector:@selector(keyboardWillShow:) name:UIKeyboardWillShowNotification object:nil];
    [kNotificationCenter addObserver:self selector:@selector(keyboardWillHide:) name:UIKeyboardWillHideNotification object:nil];
    
    // 3.监听textView的availableWords
    [self.textView addObserver:self forKeyPath:JATextViewAvailableWords options:NSKeyValueObservingOptionNew | NSKeyValueObservingOptionOld context:nil];
}

/**
 *  移除监听
 */
- (void)removeNotification
{
    [self.textView removeObserver:self forKeyPath:JATextViewAvailableWords];
    [kNotificationCenter removeObserver:self];
}

#pragma mark - delegate
- (void)scrollViewDidScroll:(UIScrollView *)scrollView
{
    [self.view endEditing:YES];
}

#pragma mark UIAlertViewDelegate
- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex {
    if (buttonIndex == 1) {
        [self handleDismiss];
    }
}

#pragma mark - 监听事件响应
/**
 *  监听文字改变
 */
- (void)textDidChange
{
    self.navigationItem.rightBarButtonItem.enabled = (self.textView.text.length != 0);
}

/**
 *  键盘即将显示的时候调用
 */
- (void)keyboardWillShow:(NSNotification *)note
{
    // 1.取出键盘的frame
    CGRect keyboardF = [note.userInfo[UIKeyboardFrameEndUserInfoKey] CGRectValue];
    
    // 2.取出键盘弹出的时间
    CGFloat duration = [note.userInfo[UIKeyboardAnimationDurationUserInfoKey] doubleValue];
    // 3.执行动画
    [UIView animateWithDuration:duration animations:^{
        self.toolBar.transform = CGAffineTransformMakeTranslation(0, -keyboardF.size.height);
    }];
}

/**
 *  键盘即将退出的时候调用
 */
- (void)keyboardWillHide:(NSNotification *)note
{
    // 1.取出键盘弹出的时间
    CGFloat duration = [note.userInfo[UIKeyboardAnimationDurationUserInfoKey] doubleValue];
    
    // 2.执行动画
    [UIView animateWithDuration:duration animations:^{
        self.toolBar.transform = CGAffineTransformIdentity;
    }];
}

/**
 *  监听textView的JALimitWords
 */
- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context
{
    if ([keyPath isEqualToString:JATextViewAvailableWords]) {
        self.toolBar.limitWords = self.textView.availableWords;
    }
}

#pragma mark - 事件响应
- (void)sendComment
{
//    JALog(@"sendComment");
    
    
    if (self.commentBlock) {
        self.commentBlock(self.textView.text);
    }
//    [self handleDismiss];// 这步骤交给调用者自己根据情况而使用
}

- (void)back
{
    if (self.textView.text.length == 0) {
        [self handleDismiss];
    } else {
        UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:nil message:@"确定退出此次编辑?" delegate:self cancelButtonTitle:@"取消" otherButtonTitles:@"确定", nil];
        [alertView show];
    }
}

#pragma mark - other
- (void)handleDismiss
{
    [self dismissViewControllerAnimated:YES completion:^{
        
    }];
}

@end
